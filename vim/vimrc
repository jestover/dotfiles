" +---------+
" + Plugins +
" +---------+

call plug#begin('~/.vim/plugged')

" +--- Workflow ---+
Plug 'Townk/vim-autoclose'             " Insert closing brackets
Plug 'tpope/vim-fugitive'              " Git integration

" +--- UI ---+
Plug 'Yggdroot/indentLine'             " Display indentation level
Plug 'itchyny/lightline.vim'           " Statusline
Plug 'airblade/vim-gitgutter'          " Show git diff in the gutter

"+--- Color Themes ---+
Plug 'arcticicestudio/nord-vim'        " Nord colorscheme for Vim
call plug#end()

"+--- Yggdroot/indentLine ---+
let g:indentLine_enabled = 0           " Turn off by default
let g:indentLine_char = '│'

"+--- itchyny/lightline.vim ---+
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'fugitive', 'filename' ]
      \   ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': {
      \   'left': '',
      \   'right': ''
      \ },
      \ 'subseparator': {
      \   'left': '',
      \   'right': ''
      \ }
    \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

"+---------------+
"+ Configuration +
"+---------------+
syntax enable
colorscheme nord

filetype plugin indent on              " Turn on filetype detection, plugins, and indentation
set autochdir                          " Set working directory to current file location 
set noswapfile                         " These three prevent Vim from creating backupfiles                      
set nobackup
set nowritebackup
set viminfo=                           " Remove vimingo
set updatetime=250                     " How many milliseconds you have to stop typing before Vim updates certain things
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

"+----+
"+ UI +
"+----+
set gfn=Source\ Code\ Pro\ Regular\ 12
set hidden                             " When opening new file, hide buffers with unsaved changes instead of closing them
set laststatus=2                       " Default to statusline on at start
set lazyredraw                         " Only redraw if needed
set noerrorbells                       " Don't make a sound for an error
set novisualbell                       " Next two prevent screen flashing
set t_vb=
set noshowmode                         " Don't show mode below statusline
set number                             " Show line number in gutter
set ruler                              " Show location in document in statusline
set wildmenu                           " Tab completion for commands

"+--- Editor ---+
set autoindent                         " Automatically keep indentation level on next line
set smartindent                        " Let code syntax dictate indentation behavior
set backspace=2                        " Makes backspace work like in most editors
set cursorline                         " Highlight the line the cursor is on
set foldcolumn=1                       " Show all fold info in one column
set foldmethod=indent                  " Fold on endent level 
set nofoldenable                       " Don't fold at startup
set listchars=eol:¬,space:·,tab:»\     " Characters to use for showing whitespace
set magic                              " Sets regex mode
set shiftwidth=2
set showmatch                          " Highlight matching brakets

set signcolumn=auto                    " Automatically toggle the sign column in gutter if there is something to show
set expandtab                          " COnvert tabs to spaces
set tabstop=2                          " Tabs go two space
set softtabstop=2                      " Backspace will treat two spaces as a tab and delete both 

" Automatically wrap left and right.
" This allows to move the cursor to the previous/next line after reaching first/last character in the line using the arrow keys in normal-, insert- (<,>) and visual mode ([,]) or the h and l keys.
set whichwrap+=<,>,h,l,[,]
set wrap                               " Allow linewrapping
set linebreak                          " Only wrap lines between words

"+--- Search ---+
set ignorecase                         " Search is case insensitive
set smartcase                          " Search becomes case sensitive if the pattern has a capital letter
set hlsearch                           " Highlight all search pattern matches
set incsearch                          " Highlight matches as you type

"+-----------+
"+ Functions +
"+-----------+
" Shows syntax highlighting groups for the current cursor position
nmap <C-S-K> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
