" +---------+
" + Plugins +
" +---------+

call plug#begin('~/.vim/plugged')

" +--- Workflow ---+
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-fugitive'

" +--- UI ---+
Plug 'Yggdroot/indentLine'
Plug 'itchyny/lightline.vim'
Plug 'airblade/vim-gitgutter'

"+--- Color Themes ---+
Plug 'arcticicestudio/nord-vim'
call plug#end()

"+--- Yggdroot/indentLine ---+
let g:indentLine_enabled = 0
let g:indentLine_char = '│'

"+--- itchyny/lightline.vim ---+
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'fugitive', 'filename' ]
      \   ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': {
      \   'left': '',
      \   'right': ''
      \ },
      \ 'subseparator': {
      \   'left': '',
      \   'right': ''
      \ }
    \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

"+--- airblade/vim-gitgutter ---+
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1

"+---------------+
"+ Configuration +
"+---------------+
syntax enable
colorscheme nord

filetype plugin on
filetype indent on
set autochdir
set nocompatible
set noswapfile
set nobackup
set nowb
set ttyfast
set viminfo=
set updatetime=250
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

"+----+
"+ UI +
"+----+
set gfn=Source\ Code\ Pro\ Regular\ 12
set hidden
set laststatus=2
set lazyredraw
set noerrorbells
set noshowmode
set novisualbell
set number
set ruler
set hidden
set t_vb=
set tm=500
set wildmenu
set wildignore=*~
set wildignore+=*/.git/*

"+--- Editor ---+
set autoindent
set backspace=indent,eol,start
set cursorline
set colorcolumn=160
set expandtab
set foldcolumn=1
set foldenable
set foldlevelstart=10
set linebreak
set listchars=eol:¬,space:·,tab:»\
set magic
set mat=2
set shiftwidth=2
set showmatch

" Toggle the sign column automatically when there are signs available to display.
set signcolumn=auto
set smartindent
set smarttab
set softtabstop=2
set tabstop=2
set textwidth=160

" Automatically wrap left and right.
" This allows to move the cursor to the previous/next line after reaching first/last character in the line using the arrow keys in normal-, insert- (<,>) and visual mode ([,]) or the h and l keys.
set whichwrap+=<,>,h,l,[,]
set wrap

"+--- Search ---+
set ignorecase
set smartcase
set hlsearch
set incsearch

"+-----------+
"+ Functions +
"+-----------+
" Shows syntax highlighting groups for the current cursor position
nmap <C-S-K> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
